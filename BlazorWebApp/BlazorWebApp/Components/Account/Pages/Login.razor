@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using BlazorWebApp.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Sign In</PageTitle>


<section id="signin">
	<div class="container">
		<StatusMessage Message="@errorMessage" />
		<EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
			<DataAnnotationsValidator />
			
			<h1>Welcome Back</h1>
			<p>Dont have an account yet?<a href="account/register">Sign Up here</a></p>
			<ValidationSummary class="text-danger" role="alert" />
			<div class="content">
				<div class="form-floating mb-3" id="form-email">
					<InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
					<label for="email" class="form-label">Email</label>
					<ValidationMessage For="() => Input.Email" class="text-danger" />
				</div>
				<div class="form-floating mb-3" id="form-password">
					<InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
					<label for="password" class="form-label">Password</label>
					<ValidationMessage For="() => Input.Password" class="text-danger" />
				</div>
				<div class="checkbox mb-3" id="form-remember">
					<label class="form-label">
						<InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
						Remember me
					</label>
				</div>
				<div>
					<button type="submit" class="w-100 btn-theme-s">Sign In</button>
				</div>
				<a id="form-forgot-password" href="Account/ForgotPassword">Forgot your password?</a>
			</div>

		</EditForm>
	</div>
</section>

@code {
	private string? errorMessage;

	[CascadingParameter]
	private HttpContext HttpContext { get; set; } = default!;

	[SupplyParameterFromForm]
	private InputModel Input { get; set; } = new();

	[SupplyParameterFromQuery]
	private string? ReturnUrl { get; set; }

	protected override async Task OnInitializedAsync()
	{
		if (HttpMethods.IsGet(HttpContext.Request.Method))
		{
			// Clear the existing external cookie to ensure a clean login process
			await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
		}
	}

	public async Task LoginUser()
	{
		// This doesn't count login failures towards account lockout
		// To enable password failures to trigger account lockout, set lockoutOnFailure: true
		var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
		if (result.Succeeded)
		{
			Logger.LogInformation("User logged in.");
			RedirectManager.RedirectTo(ReturnUrl);
		}
		else if (result.RequiresTwoFactor)
		{
			RedirectManager.RedirectTo(
				"Account/LoginWith2fa",
				new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
		}
		else if (result.IsLockedOut)
		{
			Logger.LogWarning("User account locked out.");
			RedirectManager.RedirectTo("Account/Lockout");
		}
		else
		{
			errorMessage = "Error: Invalid login attempt.";
		}
	}

	private sealed class InputModel
	{
		[Required]
		[EmailAddress]
		public string Email { get; set; } = "";

		[Required]
		[DataType(DataType.Password)]
		public string Password { get; set; } = "";

		[Display(Name = "Remember me?")]
		public bool RememberMe { get; set; }
	}
}
