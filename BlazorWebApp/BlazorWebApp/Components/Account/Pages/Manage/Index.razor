@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using BlazorWebApp.Components.Sections
@using Microsoft.AspNetCore.Identity
@using BlazorWebApp.Data

@inherits ManageLayout

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager


@attribute [StreamRendering]

	 
	@if (@user == null)
	{
	<p>Loading...</p>
	}
	else
	{
	
		<div id="forms">
			 	<EditForm Model="formModelInstance" FormName="profileFormName" OnValidSubmit="OnValidSubmitAsync" method="post">
				<DataAnnotationsValidator />
				<ValidationSummary class="text-danger" role="alert" />
				<h1>Account Details</h1>
				<h5> Basic Info</h5>
				<div class="content">					
					<div id="form-firstname" class="input-group">
						<label>First name</label>
						<span><ValidationMessage For="() => formModelInstance.FirstName" class="text-danger" /></span>
						<InputText @bind-Value="formModelInstance.FirstName" />
					</div>
					<div id="form-lastname" class="input-group">
							<label>Last name</label>
							<span><ValidationMessage For="() => formModelInstance.LastName" class="text-danger" /></span>
							<InputText @bind-Value="formModelInstance.LastName" />
					</div>
					<div id="form-email" class="input-group">
							<label>Email address</label>
							<span><ValidationMessage For="() => formModelInstance.Email" class="text-danger" /></span>
							<InputText @bind-Value="formModelInstance.Email" />
					</div>
					<div id="form-phone" class="input-group">
						<label>Phone (opinional)</label>
							<span><ValidationMessage For="() => formModelInstance.Phone" class="text-danger" /></span>
							<InputText @bind-Value="formModelInstance.Phone" placeholder="Enter your phone" />
					</div>
					<div id="form-bio" class="input-group">
							<label>Biography (opinional)</label>
							<InputText @bind-Value="formModelInstance.Bio" placeholder="Add a short bio..." />
					</div>
					<div id="form-confirm">
				</div>
					<button type="reset" class="btn-gray">Cancel</button>
					<button type="submit" class="btn-theme-s">Save Changes</button>
				</div> 
			 </EditForm> 
				@* <div>@statusMessage</div> *@
			 <EditForm Model="formModelInstance" FormName="profileFormAddress" OnValidSubmit="OnValidSubmitAsync" method="post">
				<DataAnnotationsValidator />
				<ValidationSummary class="text-danger" role="alert" />
				<h1>Address</h1>
				<div id="content-address">
					<div id="form-Adressline-1" class="input-group">
						<label>Addressline 1</label>
						<InputText @bind-Value="formModelInstance.Addressline_1" />
						</div>
					<div id="form-Adressline-2" class="input-group">
						<label>Addressline 2</label>
						<InputText @bind-Value="formModelInstance.Addressline_2" />
					</div>
					<div id="form-postalcode" class="input-group">
						<label>Postal Code</label>
						<span><ValidationMessage For="() => formModelInstance.PostalCode" class="text-danger" /></span>
						<InputText @bind-Value="formModelInstance.PostalCode"/>
					</div>
					<div id="form-city" class="input-group">
						<label>City</label>
						<span><ValidationMessage For="() => formModelInstance.City" class="text-danger" /></span>
						<InputText @bind-Value="formModelInstance.City"/>
					</div>
					<div id="form-address-confirm">
						<button type="reset" class="btn-gray">Cancel</button>
						<button type="submit" class="btn-theme-s">Save Changes</button>
					</div>
				</div>
			</EditForm> 
		</div>
	

	}


@code {

	[CascadingParameter]
	public ApplicationUser userIndex { get; set; }	

	[CascadingParameter]
	public HttpContext? HttpContext { get; set; }

	public UserProfile userProfile;

	public UserAddress userAddress;

	private StatusMessage statusMessage = default;



	// [Parameter]
	// public HttpContext HttpContext { get; set; } = default!;

	[SupplyParameterFromForm]
	private FormModel formModelInstance { get; set; } = new();


	protected override async Task OnInitializedAsync()
	{
		// string returnedEmail = HttpContext.User.Identity.Name;
		user = await UserManager.GetUserAsync(HttpContext.User);
		

		// var userProfileId = user.UserProfileId;
		// var userAddressId = user.UserAddressId;

		// userProfile = _context.UserProfiles.FirstOrDefault(x => x.Id == user.UserProfileId)!;


		if (user != null)
		{
			var userProfileId = user.UserProfileId;
			var userAddressId = user.UserAddressId;

			if (userAddressId != null)
			{
				userAddress =  _context.UserAddresses.FirstOrDefault(x => x.Id == user.UserAddressId)!;
			}

			if (userProfileId != null)
			{
				userProfile = _context.UserProfiles.FirstOrDefault(x => x.Id == user.UserProfileId);
			}


			formModelInstance.FirstName ??= userProfile.Firstname;
			formModelInstance.LastName ??= userProfile.Lastname;
			formModelInstance.Email ??= user?.Email;
			formModelInstance.Phone ??= user?.PhoneNumber;
			formModelInstance.Bio ??= userProfile?.Bio;


			if (user?.UserAddressId != null)
			{
				user.UserAddress = _context.UserAddresses.FirstOrDefault(x => x.Id == user.UserAddressId);

				formModelInstance.Addressline_1 ??= userAddress.AddressLine_1;
				formModelInstance.Addressline_2 ??= userAddress.AddressLine_2;
				formModelInstance.PostalCode ??= userAddress.PostalCode;
				formModelInstance.City ??= userAddress.City;
			}
		}
	}


	private async Task OnValidSubmitAsync()
	{
		// // user = await UserManager.ChangeEmailAsync(asd,asd,token)

		// Console.WriteLine(formModelInstance);

		user.UserProfile.Firstname = formModelInstance.FirstName != user.UserProfile.Firstname ? formModelInstance.FirstName : user.UserProfile.Firstname;
		user.UserProfile.Lastname = formModelInstance.LastName != user.UserProfile.Lastname ? formModelInstance.LastName : user.UserProfile.Lastname;

		// user.Email = formModelInstance.Email != user.Email ? formModelInstance.Email : user.Email; //asdasdasd

		user.UserProfile.Bio = formModelInstance.Bio != user.UserProfile.Bio ? formModelInstance.Bio : user.UserProfile.Bio;

		// Update user address information based on form input
		if (user.UserAddressId == null && formModelInstance.Addressline_1 != null && formModelInstance.PostalCode != null && formModelInstance.City != null)
		{
			UserAddress userAddressInstace = new UserAddress
				{
					AddressLine_1 = formModelInstance.Addressline_1,
					PostalCode = formModelInstance.PostalCode,
					City = formModelInstance.City,
				};
			_context.UserAddresses.Add(userAddressInstace);
			user.UserAddressId = userAddressInstace.Id;
			await _context.SaveChangesAsync();
			return;
		}

		// if (formModelInstance.Addressline_1 != null && formModelInstance.PostalCode != null && formModelInstance.City != null)

		if(user.UserAddress != null)
		{

			user.UserAddress.AddressLine_1 = formModelInstance?.Addressline_1 != user.UserAddress.AddressLine_1 ? formModelInstance.Addressline_1 : user.UserAddress.AddressLine_1;
			user.UserAddress.AddressLine_2 = formModelInstance?.Addressline_2 != user.UserAddress.AddressLine_2 ? formModelInstance.Addressline_2 : user.UserAddress.AddressLine_2;
			user.UserAddress.PostalCode = formModelInstance?.PostalCode != user.UserAddress.PostalCode ? formModelInstance.PostalCode : user.UserAddress.PostalCode;
			user.UserAddress.City = formModelInstance?.City != user.UserAddress.City ? formModelInstance.City : user.UserAddress.City;

			_context.UserAddresses.Update(user.UserAddress);
		}

		_context.UserProfiles.Update(user.UserProfile);

		await _context.SaveChangesAsync();
		StateHasChanged();

		// await SignInManager.RefreshSignInAsync(user);
		// RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);

	}

	public class FormModel
	{
		[Display(Name = "First name", Prompt = "Enter your first name", Order = 0)]
		[Required(ErrorMessage = "Enter a first name")]
		[MinLength(2, ErrorMessage = "Enter a first name")]
		public string FirstName { get; set; } = null!;

		[Display(Name = "Last name", Prompt = "Enter your last name", Order = 1)]
		[Required(ErrorMessage = "Enter a last name")]
		[MinLength(2, ErrorMessage = "Enter a last name")]
		public string LastName { get; set; } = null!;

		[Display(Name = "Phone", Prompt = "Enter your phone", Order = 3)]
		[DataType(DataType.PhoneNumber)]
		public string Phone { get; set; } = null!;

		[Required]
		[DataType(DataType.EmailAddress)]
		[Display(Name = "Email address", Prompt = "Enter your email address", Order = 2)]
		[RegularExpression(@"^[\w-\.]+@([\w-]+\.)+[\w-]{2,}$", ErrorMessage = "Invalid email address")]


		public string Email { get; set; } = null!;


		[DataType(DataType.Password)]
		[Display(Name = "Password", Prompt = "Enter your Password", Order = 3)]
		[RegularExpression(@"^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$",
		ErrorMessage = "Password must be at least 8 characters long and include letters, digits, and special characters.")]

		public string Password { get; set; } = null!;

		[DataType(DataType.Password)]
		[Display(Name = "Confirm password", Prompt = "Confirm your password", Order = 4)]
		[Compare(nameof(Password), ErrorMessage = "Password does not match")]
		public string ConfirmPassword { get; set; } = null!;


		[DataType(DataType.ImageUrl)]
		public string? ProfileImage { get; set; }

		[Display(Name = "Bio", Prompt = "Add a short bio...", Order = 4)]
		[DataType(DataType.MultilineText)]
		public string? Bio { get; set; }



		[Display(Name = "Address line 1", Prompt = "Enter your address line ", Order = 0)]
		// [Required(ErrorMessage = "Address is required")]
		[DataType(DataType.Text)]
		[MinLength(2, ErrorMessage = "Address is required")]
		public string Addressline_1 { get; set; } = null!;

		[Display(Name = "Address line 2", Prompt = "Enter your second address line", Order = 1)]
		public string? Addressline_2 { get; set; }

		[Display(Name = "Postal Code", Prompt = "Enter your postal code", Order = 2)]
		// [Required(ErrorMessage = "Postal code is required")]
		[DataType(DataType.PostalCode)]
		[MinLength(2, ErrorMessage = "Postal code is required")]

		public string PostalCode { get; set; } = null!;

		[Display(Name = "City", Prompt = "Enter your City", Order = 3)]
		// [Required(ErrorMessage = "City is required")]
		[DataType(DataType.Text)]
		[MinLength(2, ErrorMessage = "City is required")]
		public string City { get; set; } = null!;
	}

}

