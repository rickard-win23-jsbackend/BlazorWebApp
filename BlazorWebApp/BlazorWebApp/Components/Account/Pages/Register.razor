@page "/Account/Register"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BlazorWebApp.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Sign up</PageTitle>

<section id="signup">
    <div class="container">

        @if(!string.IsNullOrEmpty(StatusMessage))
        {
            <div class="alert alert-danger">
                @StatusMessage
             </div>
        }
        <EditForm FormName="signupform" Model="SignUpForm" OnValidSubmit="OnValidSubmit" asp-route-returnUrl="@ReturnUrl" method="post" novalidate>
            <DataAnnotationsValidator />
            <h1>Create Account</h1>
            <p>Already have an account?<a href="/account/login">Sign in here</a></p>
        @*     @Html.ValidationSummary(false, "", new { @class = "text-danger" }) *@

            <div class="content">
                <div id="form-firstname" class="input-group">
                    <label>First name</label>
                    <ValidationMessage For="() => SignUpForm.FirstName" class="text-danger" />
                    <InputText @bind-Value="SignUpForm.FirstName" />
                </div>
                <div id="form-lastname" class="input-group">
                    <label >Last name</label>
                    <ValidationMessage For="() => SignUpForm.LastName" />
                    <InputText @bind-Value="SignUpForm.LastName"/>
                </div>
                <div id="form-email" class="input-group">
                    <label>Email</label>
                    <ValidationMessage For="() => SignUpForm.Email" class="text-danger" />
                    <InputText @bind-Value="SignUpForm.Email" type="email" />
                </div>
                <div id="form-password" class="input-group">
                    <label>Password</label>
                    <ValidationMessage For="() => SignUpForm.Password" class="text-danger" />
                    <InputText @bind-Value="SignUpForm.Password" type="password" />
                </div>
                <div id="form-confirm" class="input-group">
                    <label>Confirm password</label>
                    <ValidationMessage For="() => SignUpForm.ConfirmPassword" class="text-danger" />
                    <InputText @bind-Value="SignUpForm.ConfirmPassword" type="password"/>
                </div>
                <div id="form-terms" class="checkbox">
                    <div class="checkbox-group">
                        <InputCheckbox @bind-Value="SignUpForm.Terms" />
                        <label>I agree to the Terms & Conditions</label>
                    </div>
                    <ValidationMessage For="() => SignUpForm.Terms" class="text-danger" />
                </div>

                <button type="submit" id="form-button" class="btn-theme-s">Sign Up</button>
            </div>


        </EditForm>

    </div>
</section>

@code{
    [SupplyParameterFromQuery]
    private string StatusMessage { get; set; } = "";

    [SupplyParameterFromQuery]
    private string ReturnUrl { get; set; } = "/";

    [SupplyParameterFromForm]
    private SignUpFormModel SignUpForm { get; set; } = new();

    public async Task OnValidSubmit(EditContext editContext)
    {

        var user = new ApplicationUser
        {
            UserProfile = new UserProfile
            {
                    Firstname = SignUpForm.FirstName,
                    Lastname = SignUpForm.LastName,
            },
              UserName = SignUpForm.Email,
              Email = SignUpForm.Email
        };  

        try
        {
            var alreadyExists = await UserManager.FindByEmailAsync(SignUpForm.Email);
            if (alreadyExists != null)
            {
                StatusMessage = "an account with this email does already exist";
                 return;
            }

            var result = await UserManager.CreateAsync(user, SignUpForm.Password);
            if (!result.Succeeded)
            {
                StatusMessage = "unable to register an account, please try again.";
                return;
            }
        }
        catch (Exception ex)
        {
            StatusMessage = "unable to register an account, please try again.";
            return;
        }

        // await Http.PostAsJsonAsync("", SignUpForm);
        // if (UserManager.Options.SignIn.RequireConfirmedAccount)
        // {
        //     RedirectManager.RedirectTo(
        //         "Account/RegisterConfirmation",
        //         new() { ["email"] = SignUpForm.Email, ["returnUrl"] = ReturnUrl });
        // }

        await SignInManager.SignInAsync(user, isPersistent: false);
       
        
          RedirectManager.RedirectTo(ReturnUrl); //funkar ej
    }
        


    public class SignUpFormModel
    {
        [Display(Name = "First name", Prompt = "Enter your first name", Order = 0)]
        [Required(ErrorMessage = "Enter a first name")]
        [MinLength(2, ErrorMessage = "Enter a first name")]
        public string FirstName { get; set; } = null!;

        [Display(Name = "Last name", Prompt = "Enter your last name", Order = 1)]
        [Required(ErrorMessage = "Enter a last name")]
        [MinLength(2, ErrorMessage = "Enter a last name")]
        public string LastName { get; set; } = null!;

       
        [Required]
        [DataType(DataType.EmailAddress)]
        [Display(Name = "Email address", Prompt = "Enter your email address", Order = 2)]
        [RegularExpression(@"^[\w-\.]+@([\w-]+\.)+[\w-]{2,}$", ErrorMessage = "Invalid email address")]


        public string Email { get; set; } = null!;


        [DataType(DataType.Password)]
        [Display(Name = "Password", Prompt = "Enter your Password", Order = 3)]
        [Required]
        [RegularExpression(@"^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$",
        ErrorMessage = "Password must be at least 8 characters long and include letters, digits, and special characters.")]

        public string Password { get; set; } = null!;

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password", Prompt = "Confirm your password", Order = 4)]
        [Required(ErrorMessage = "Must confirm password")]
        [Compare(nameof(Password), ErrorMessage = "Password does not match")]
        public string ConfirmPassword { get; set; } = null!;

        [Display(Name = "I agree to the Terms & Conditions", Order = 5)]
        [Required(ErrorMessage = "Must agree to the terms & conditions")]
        public bool Terms { get; set; }
    }
}



@* 
<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>Create a new account.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to register.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div>
</div>
 *@
@* @code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
} *@
