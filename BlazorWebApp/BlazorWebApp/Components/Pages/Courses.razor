@page "/courses"
@using Microsoft.AspNetCore.Authorization
@using System.Text.Json
@using System.Text.Json.Serialization


@attribute [StreamRendering]
@attribute [Authorize]

<PageTitle>Courses</PageTitle>

<section class="courses">
	<div class="container">
		<div class="sub-nav">
			<a asp-action="Index" asp-controller="Home"><i class="fa-light fa-house"></i>Home</a>
			<p>»</p>
			<a asp-action="Index" asp-controller="Courses">Courses</a>
		</div>
		<div class="top-box">
			<h1>Courses</h1>
			<form id="form-filters">
				<select name="category" select id="category" title="category">
					<option>All categories</option>
				</select>
				<div class="input-search-group">
					<input id="searchQuery" name="searchQuery" placeholder="Search courses" />
					<i class="fa-regular fa-search"></i>
				</div>
			</form>
		</div>

		<div class="course-items">
			@if (courses == null ||courses.Count <= 0)
			{

				<p>No courses found yet, please wait...</p>

			}
			else
			{
				@foreach (var course in courses)
				{
				
				
					<a class="course" asp-action="Details" asp-asp-controller="Courses" asp-route-id="@course.Id">

						@* <p>"Id @course.Id</p>
						<p>"IsBestseller @course.IsBestseller</p>
						<p>"Title @course.Title</p>
						<p>"Author @course.Authors.FirstOrDefault();</p>
						<p>"Price @course.Prices.Price</p>
						<p>"Currency @course.Prices.Currency</p>
						<p>"DiscountPrice @course.Prices.Discount</p>
						<p>"Hours @course.Hours</p>
						<p>"ImageUri @course.ImageUri</p>
						<p>"LikesInProcent @course.LikesInProcent</p>
						<p>"Likes @course.Likes</p> *@

						<div class="image-box">
							@if (course.IsBestseller)
							{
								<div class="bestseller">Best Seller</div>
							}
							<button class="btn btn-circle bookmark"><i class="fa-regular fa-bookmark"></i></button>
							<img src="@course.ImageUri" alt="@course.Title" />

						</div>

						<div class="content">
							<h5 class="title">@course.Title</h5>
							<p class="author">

								@if (@course.Authors.Count > 1)
								{
									int counter = 0;

									@foreach (var author in course.Authors)
									{
										counter++;
										<span>@author.Name	</span>
										@if (counter <= 1 && counter < course.Authors.Count)
										{<span> & </span>}
									}
								}
								else
								{
									@if(course.Authors.Any())
									{
									<span>@course.Authors[0].Name</span>	
									}
								}
							 </p>
							<div class="pricing">
								@if (@course.Prices.Currency == "USD")
								{
									<div>
										<p class="currency@(@course.Prices.Discount !=0 ? "discount" : "" )">$</p>
									</div>
								}
								@if (@course.Prices.Discount != 0)
								{
									<div class="discount">
										@course.Prices.Discount
									</div>
								}
								<div class="price @(@course.Prices.Discount != 0 ? "discount-enabled" : "")">
									@course.Prices.Price
								</div>
							</div>
							<div class="content-footer">
								<div class"hours">
									<i class="fa-regular fa-clock"></i>@course.Hours hours
								</div>
								<div class="likes">
									<i class="fa-regular fa-thumbs-up"></i> @course.LikesInProcent (@course.Likes)
								</div>
							</div>
						</div>
					</a>
				}
			}
		</div>
	</div>

	<div class="lower-nav-courses">
		<a class="previous"></a>
		<a>1</a>
		<a>2</a>
		<a class="hover">3</a>
		<a class="active">4</a>
		<a>5</a>
		<a class="next">></a>
	</div>
	<div class="ready-box container">
		<div  class="text-ready">
			<p>Ready to get started?</p>
			<h1>Take Your <span>Skills</span> to the <br />Next Level</h1>
			<button class="btn btn-theme-s work-with">Work with us</button>
		</div>
		<img src="/images/courses/group.svg" alt="lady with cat and laptop" />

	</div>
</section>



@code {

	private List<CourseCardModel>? courses = new List<CourseCardModel>();

	// protected override async Task OnInitializedAsync()
	// {
	// 	try
	// 	{
	// 		// Http.
	// 		// //connect to nosql server
	// 		// //populate list
	// 	}
	// 	catch (Exception)
	// 	{

	// 	}
	// }

	//implement hotchoco and graphql

	protected override async Task OnInitializedAsync()
	{
		try
		{
			// var query = new GraphQLQuery{Query = "{ getCourses { id, imageUri, imageHeaderUri, isBestseller, isDigital, categories, title, ingress, starRating, reviews, likesInProcent, likes, hours, authors { name }, prices { currency, price, discount }, content { description, includes, programDetails { id, title, description }}}}" };
			// var query = new GraphQLQuery{ Query = "{ getCourses { id isBestseller title authors { name } prices { price discount currency } imageUri hours likesInProcent likes }}"};
			var query = new GraphQLQuery { Query = "{ getCourses { id, isBestseller, isDigital, categories, title, ingress, starRating, reviews, likesInProcent, likes, hours, authors { name }, prices { currency, price, discount }, content { description, includes, programDetails { id, title, description } }, imageUri, imageHeaderUri } }" };

			// var response = await Http.PostAsJsonAsync("http://localhost:7267/api/graphql", query);

			var response = await Http.PostAsJsonAsync("https://graphqlsilicon.azurewebsites.net/api/graphql?code=BbobW8JFrQsHoKtHJVy_1INU8v03PI7bqcZsi_eHL8UyAzFuJOEwvw%3D%3D", query);

			if (response.IsSuccessStatusCode)
			{
				var result = await response.Content.ReadFromJsonAsync<DynamicGraphQLResponse>();
				courses = result?.Data.GetProperty("getCourses").EnumerateArray()
				.Select(course => new CourseCardModel
					{
						Id = course.GetProperty("id").GetString(),
						IsBestseller = course.GetProperty("isBestseller").GetBoolean(),
						IsDigital = course.GetProperty("isDigital").GetBoolean(),
						Categories = course.GetProperty("categories").EnumerateArray().Select(x => x.GetString()).ToArray(),
						Title = course.GetProperty("title").GetString(),
						Ingress = course.GetProperty("ingress").GetString(),
						StarRating = course.GetProperty("starRating").GetDecimal(),
						Reviews = course.GetProperty("reviews").GetString(),
						LikesInProcent = course.GetProperty("likesInProcent").GetString(),
						Likes = course.GetProperty("likes").GetString(),
						Hours = course.GetProperty("hours").GetString(),
						Authors = course.GetProperty("authors").EnumerateArray().Select(x => new AuthorModel { Name = x.GetProperty("name").GetString() }).ToList(),
						Prices = new PricesModel
						{
							Currency = course.GetProperty("prices").GetProperty("currency").GetString(),
							Price = course.GetProperty("prices").GetProperty("price").GetDecimal(),
							Discount = course.GetProperty("prices").GetProperty("discount").GetDecimal()
						},
						// Content = new ContentModel
						// {
						// 	Description = course.GetProperty("content").GetProperty("description").GetString(),
						// 	Includes = course.GetProperty("content").GetProperty("includes").EnumerateArray().Select(x => x.GetString()).ToArray(),
						// 	ProgramDetails = course.GetProperty("content").GetProperty("programDetails").EnumerateArray().Select(x => new ProgramDetailItemModel { Id = x.GetProperty("id").GetInt32(), Title = x.GetProperty("title").GetString(), Description = x.GetProperty("description").GetString() }).ToList()
						// },
						ImageUri = course.GetProperty("imageUri").GetString(),
						ImageHeaderUri = course.GetProperty("imageHeaderUri").GetString()
					})
				.ToList();
			}

		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
	}


	public class CourseCardModel
	{
		public string Id { get; set; }

		public string? ImageUri { get; set; }

		public string? ImageHeaderUri { get; set; }

		public bool IsBestseller { get; set; }

		public bool IsDigital { get; set; }

		public string[]? Categories { get; set; }

		public string? Title { get; set; }

		public string? Ingress { get; set; }

		public decimal StarRating { get; set; }

		public string? Reviews { get; set; }

		public string? LikesInProcent { get; set; }

		public string? Likes { get; set; }

		public string? Hours { get; set; }

		public List<AuthorModel>? Authors { get; set; }

		public PricesModel? Prices { get; set; }

		public ContentModel? Content { get; set; }
	}

	public class AuthorModel
	{
		public string? Name { get; set; }
	}

	public class PricesModel
	{
		public string? Currency { get; set; }

		public decimal Price { get; set; }

		public decimal? Discount { get; set; }
	}

	public class ContentModel
	{
		public string? Description { get; set; }

		public string[]? Includes { get; set; }

		public List<ProgramDetailItemModel>? ProgramDetails { get; set; }
	}

	public class ProgramDetailItemModel
	{
		public int Id { get; set; }

	}

	public class GraphQLQuery
	{
		public string Query { get; set; } = null!;
	}
	public class DynamicGraphQLResponse
	{
		[JsonPropertyName("data")]

		public JsonElement Data { get; set; }
	}
}